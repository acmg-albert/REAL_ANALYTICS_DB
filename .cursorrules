# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Project Requirements

## Code Organization
- Each data source and database module should be completely independent
- Separate modules for each data table to avoid code coupling
- No module should affect the functionality of other modules
- Maintain clean separation of concerns

## Code Style
- All code, comments, database fields, and documentation must be in English
- No mixing of Chinese and English in code or documentation
- Keep naming conventions consistent throughout the project

## Execution Requirements
- All data scraping and import processes must show clear progress status
- Include logging for all operations
- Display clear success/failure messages
- Show progress bars for long-running operations

## Database Design
- Each table should have clear, English-named fields
- Use consistent naming conventions across all tables
- Include proper documentation for all database schemas

## Logging and Monitoring
- Log all operations with appropriate detail level
- Include timestamp and operation status
- Show clear progress indicators for all operations
- Maintain separate logs for different operations

# Lessons

## 项目路径 - 重要！
- 项目根目录是 `E:\Cursor_AI\REAL_ANALYTICS_DB`（使用反斜杠！）
- 不要使用 `E:/Cursor_AI/REAL_ANALYTICS_DB`（错误的正斜杠）
- 所有相对路径都应该相对于这个目录
- 在 PowerShell 中必须使用反斜杠 `\`

## GitHub 更新规则 - 重要！
- 每次提交到 GitHub 前必须检查并处理敏感信息：
  - 数据库 URL（例如 Supabase URL）
  - API 密钥（例如 Supabase anon key, service role key）
  - 环境变量文件中的敏感信息
  - 测试文件中的示例数据
  - 日志文件中的敏感信息
- 处理方法：
  - 使用占位符替换敏感信息（例如：your_supabase_url）
  - 确保 .env 文件已在 .gitignore 中
  - 检查所有包含敏感信息的文件
  - 在提交前使用 git diff 检查变更
  - 使用 .env.example 作为环境变量模板

## 用户指定的经验教训
- 使用 Python venv 在 ./venv 目录
- 在程序输出中包含调试信息
- 在编辑文件前先阅读文件内容
- 所有代码、注释和文档必须使用英文
- 每个数据源模块必须独立
- 所有操作必须显示清晰的进度状态

## 爬虫改进经验
- 动态获取 CSV URL 比使用固定 URL 更可靠
- 需要正确处理 URL 中的时间戳参数
- 添加适当的请求头和用户代理
- 实现重试机制和错误处理
- 添加随机延迟避免被封禁
- 验证响应内容和文件完整性

## Zillow 数据源经验
- 直接使用 Zillow 的 CSV 文件 URL 更高效
- 示例 URL：
  * 房主负担能力：`https://files.zillowstatic.com/research/public_csvs/new_homeowner_affordability/Metro_new_homeowner_affordability_downpayment_0.20_uc_sfrcondo_tier_0.33_0.67_sm_sa_month.csv`
  * 租户负担能力：`https://files.zillowstatic.com/research/public_csvs/new_renter_affordability/Metro_new_renter_affordability_uc_sfrcondomfr_sm_sa_month.csv`
- 不需要复杂的网页抓取逻辑
- 需要验证数据完整性和格式
- 保持 URL 参数的一致性

## Supabase 数据更新规则 - 重要！
- 数据表更新必须遵循以下规则：
  1. 新地区(locations)处理：
     * 如果发现新的地区，必须添加该地区的所有历史数据
     * 确保新地区有完整的历史数据记录
  
  2. 现有地区新月份数据：
     * 对已存在的地区，只添加新月份的数据
     * 保持数据的连续性
  
  3. 历史数据更新规则：
     * 比较新数据和数据库中的现有值
     * 只有当新数据不为空(NOT NULL)时才更新
     * 当新数据为空(NULL)时保留数据库中的现有值
     * 防止空值覆盖有效数据
  
  4. 实现要求：
     * 使用 upsert 操作进行数据更新
     * 正确处理 NULL 值
     * 在数据库查询中实现适当的 NULL 值处理
     * 确保数据完整性和连续性
     * 防止意外的数据丢失

## 代码重构注意事项
- 重构数据库客户端时必须保持现有的数据更新逻辑不变
- 每个数据表应该有独立的客户端类
- 在移动或修改代码时必须确保：
  * 数据更新规则保持不变
  * NULL 值处理逻辑保持不变
  * upsert 操作逻辑保持不变
  * 数据验证逻辑保持不变

## 数据库字段命名规则 - 重要！
- 数据处理时必须严格遵循数据库表的字段命名
- 已确认的字段名：
  * vacancy_index 表：`vacancy_index`（不是 vacancy_index_overall）
  * time_on_market 表：`time_on_market`（不是 time_on_market_overall）
  * 在处理数据时保持与数据库表结构的一致性
  * 在修改字段名之前先确认数据库表的实际结构

## 数据表字段结构 - 重要！
- ApartmentList Rent Estimates 表包含三个指标：
  * rent_estimate_overall
  * rent_estimate_1br
  * rent_estimate_2br

- ApartmentList Time on Market 表只有一个指标：
  * time_on_market（不包含1br和2br）

- ApartmentList Vacancy Index 表只有一个指标：
  * vacancy_index（不包含1br和2br）

# Scratchpad

## 当前项目状态回顾（2024-03-08）

### 已完成功能
1. ApartmentList 数据流程（完整）
   - 数据抓取
   - 数据处理
   - Supabase 数据导入更新
   - 三个数据表和视图：
     * apartment_list_rent_estimates, apartment_list_rent_estimates_view
     * apartment_list_time_on_market, apartment_list_time_on_market_view
     * apartment_list_vacancy_index, apartment_list_vacancy_index_view
   - Render 部署测试成功

2. Zillow Affordability 数据流程（已完成）
   - 数据抓取 ✓
   - 数据处理 ✓
   - Supabase 数据表和视图创建：
     * zillow_new_homeowner_affordability_down_20pct
     * zillow_new_homeowner_affordability_down_20pct_view
   - 数据导入更新问题修复 ✓
   - Render 部署更新 ✓
   - 代码优化（直接使用 CSV URL）✓

3. Zillow Renter Affordability 数据流程（已完成）
   - 代码文件创建 ✓
     * src/scrapers/zillow/renter_affordability_scraper.py
     * src/scripts/scrape_zillow_renter_affordability.py
     * src/scrapers/zillow/renter_affordability_processor.py
     * src/scripts/process_zillow_renter_affordability.py
     * src/scripts/import_zillow_renter_affordability.py
   - 数据库方法添加 ✓
     * SupabaseClient.insert_zillow_renter_affordability()
   - 数据抓取 ✓
   - 数据处理 ✓
   - 数据导入 ✓
   - 物化视图刷新 ✓

### 当前任务：数据库客户端重构（2024-03-08）

### 重构目标
- 将 Supabase 客户端按数据表拆分
- 保持现有数据更新逻辑不变
- 确保代码模块化和可维护性

### 重构计划
[X] 第一阶段：基础设施
  [X] 创建新的目录结构
  [X] 实现基础客户端类（base_client.py）
  [X] 设置单元测试框架

[X] 第二阶段：ApartmentList Rent Estimates（试点）
  [X] 创建 rent_estimates_client.py
  [X] 迁移现有的更新逻辑
  [X] 更新导入脚本
  [X] 测试功能完整性

[X] 第三阶段：其他数据表
  [X] ApartmentList Vacancy Index
    [X] 创建 vacancy_index_client.py
    [X] 迁移现有的更新逻辑
    [X] 更新导入脚本
    [X] 测试功能完整性
  
  [X] ApartmentList Time on Market
    [X] 创建 time_on_market_client.py
    [X] 迁移现有的更新逻辑
    [X] 更新导入脚本
    [X] 测试功能完整性
  
  [X] Zillow Homeowner Affordability
    [X] 创建 homeowner_affordability_client.py
    [X] 迁移现有的更新逻辑
    [X] 更新导入脚本
    [X] 测试功能完整性
  
  [X] Zillow Renter Affordability
    [X] 创建 renter_affordability_client.py
    [X] 迁移现有的更新逻辑
    [X] 更新导入脚本
    [X] 测试功能完整性

### 下一步计划
[ ] 性能优化
  [ ] 优化数据导入批处理大小
  [ ] 优化数据处理逻辑
  [ ] 优化错误处理和重试机制
  [ ] 添加性能监控指标

[ ] 监控系统完善
  [ ] 完善日志记录
  [ ] 添加数据质量检查
  [ ] 设置告警阈值
  [ ] 创建监控仪表板

### 项目路径重要提醒
- 所有操作必须在 `E:\Cursor_AI\REAL_ANALYTICS_DB` 目录下进行
- 使用反斜杠 `\` 而不是正斜杠 `/`
- 相对路径从项目根目录开始
- PowerShell 命令中使用反斜杠

## 当前任务：测试 ApartmentList Time on Market 数据流程

### 测试计划
[X] 1. 运行数据抓取脚本
    - 执行 scrape_apartment_list_time_on_market.py ✓
    - 验证生成的原始数据文件 ✓

[X] 2. 运行数据处理脚本
    - 执行 process_apartment_list_time_on_market.py ✓
    - 验证生成的处理后数据文件 ✓

[ ] 3. 运行数据导入脚本
    - 执行 import_apartment_list_time_on_market.py
    - 验证数据是否成功导入数据库
    - 确认物化视图是否正确刷新

### 注意事项
- 确保每个步骤都显示清晰的进度状态
- 验证数据的完整性和正确性
- 确保正确处理 NULL 值
- 遵循数据库更新规则：
  * 新地区添加所有历史数据
  * 现有地区添加新月份数据
  * 仅当新数据不为空时更新历史数据
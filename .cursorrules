# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Project Requirements

## Code Organization
- Each data source and database module should be completely independent
- Separate modules for each data table to avoid code coupling
- No module should affect the functionality of other modules
- Maintain clean separation of concerns

## Code Style
- All code, comments, database fields, and documentation must be in English
- No mixing of Chinese and English in code or documentation
- Keep naming conventions consistent throughout the project

## Execution Requirements
- All data scraping and import processes must show clear progress status
- Include logging for all operations
- Display clear success/failure messages
- Show progress bars for long-running operations

## Database Design
- Each table should have clear, English-named fields
- Use consistent naming conventions across all tables
- Include proper documentation for all database schemas

## Logging and Monitoring
- Log all operations with appropriate detail level
- Include timestamp and operation status
- Show clear progress indicators for all operations
- Maintain separate logs for different operations

# Lessons

## 项目路径 - 重要！
- 项目根目录是 `E:\Cursor_AI\REAL_ANALYTICS_DB`（使用反斜杠！）
- 不要使用 `E:/Cursor_AI/REAL_ANALYTICS_DB`（错误的正斜杠）
- 所有相对路径都应该相对于这个目录
- 在 PowerShell 中必须使用反斜杠 `\`

## GitHub 更新规则 - 重要！
- 每次提交到 GitHub 前必须检查并处理敏感信息：
  - 数据库 URL（例如 Supabase URL）
  - API 密钥（例如 Supabase anon key, service role key）
  - 环境变量文件中的敏感信息
  - 测试文件中的示例数据
  - 日志文件中的敏感信息
- 处理方法：
  - 使用占位符替换敏感信息（例如：your_supabase_url）
  - 确保 .env 文件已在 .gitignore 中
  - 检查所有包含敏感信息的文件
  - 在提交前使用 git diff 检查变更
  - 使用 .env.example 作为环境变量模板

## 用户指定的经验教训
- 使用 Python venv 在 ./venv 目录
- 在程序输出中包含调试信息
- 在编辑文件前先阅读文件内容
- 所有代码、注释和文档必须使用英文
- 每个数据源模块必须独立
- 所有操作必须显示清晰的进度状态

## 爬虫改进经验
- 动态获取 CSV URL 比使用固定 URL 更可靠
- 需要正确处理 URL 中的时间戳参数
- 添加适当的请求头和用户代理
- 实现重试机制和错误处理
- 添加随机延迟避免被封禁
- 验证响应内容和文件完整性

## Zillow 数据源经验
- 直接使用 Zillow 的 CSV 文件 URL 更高效
- 示例 URL：
  * 房主负担能力：`https://files.zillowstatic.com/research/public_csvs/new_homeowner_affordability/Metro_new_homeowner_affordability_downpayment_0.20_uc_sfrcondo_tier_0.33_0.67_sm_sa_month.csv`
  * 租户负担能力：`https://files.zillowstatic.com/research/public_csvs/new_renter_affordability/Metro_new_renter_affordability_uc_sfrcondomfr_sm_sa_month.csv`
- 不需要复杂的网页抓取逻辑
- 需要验证数据完整性和格式
- 保持 URL 参数的一致性

# Scratchpad

## 当前项目状态回顾（2024-03-08）

### 已完成功能
1. ApartmentList 数据流程（完整）
   - 数据抓取
   - 数据处理
   - Supabase 数据导入更新
   - 三个数据表和视图：
     * apartment_list_rent_estimates, apartment_list_rent_estimates_view
     * apartment_list_time_on_market, apartment_list_time_on_market_view
     * apartment_list_vacancy_index, apartment_list_vacancy_index_view
   - Render 部署测试成功

2. Zillow Affordability 数据流程（已完成）
   - 数据抓取 ✓
   - 数据处理 ✓
   - Supabase 数据表和视图创建：
     * zillow_new_homeowner_affordability_down_20pct
     * zillow_new_homeowner_affordability_down_20pct_view
   - 数据导入更新问题修复 ✓
   - Render 部署更新 ✓
   - 代码优化（直接使用 CSV URL）✓

3. Zillow Renter Affordability 数据流程（已完成）
   - 代码文件创建 ✓
     * src/scrapers/zillow/renter_affordability_scraper.py
     * src/scripts/scrape_zillow_renter_affordability.py
     * src/scrapers/zillow/renter_affordability_processor.py
     * src/scripts/process_zillow_renter_affordability.py
     * src/scripts/import_zillow_renter_affordability.py
   - 数据库方法添加 ✓
     * SupabaseClient.insert_zillow_renter_affordability()
   - 数据抓取 ✓
   - 数据处理 ✓
   - 数据导入 ✓
   - 物化视图刷新 ✓

### 当前任务
[X] 优化 Zillow Renter Affordability 抓取代码
  [X] 找到直接 CSV URL
  [X] 更新抓取逻辑
  [X] 测试新的抓取方法
  [X] 验证数据完整性

[X] 代码清理和文档更新
  [X] 更新所有代码注释
  [X] 更新 README.md
  [X] 更新 API 文档
  [X] 更新部署文档

### 下一步计划
[ ] 性能优化
  [ ] 优化数据导入批处理大小
  [ ] 优化数据处理逻辑
  [ ] 优化错误处理和重试机制
  [ ] 添加性能监控指标

[ ] 监控系统完善
  [ ] 完善日志记录
  [ ] 添加数据质量检查
  [ ] 设置告警阈值
  [ ] 创建监控仪表板

### 项目路径重要提醒
- 所有操作必须在 `E:\Cursor_AI\REAL_ANALYTICS_DB` 目录下进行
- 使用反斜杠 `\` 而不是正斜杠 `/`
- 相对路径从项目根目录开始
- PowerShell 命令中使用反斜杠